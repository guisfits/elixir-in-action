# 06. Generic Server Processes

## Using GenServer

```elixir
defmodule KeyValueStore do
  use GenServer
end
```

The `use` macro is a language feature you haven't seen previously. During compilation, when this instruction is encountered, the specific macro from the `GenServer` module is invoked. That macro then injects a bunch of functions into the calling module (`KeyValueStore`, in this case)

<!-- livebook:{"break_markdown":true} -->

* `init/1` accepts one argument. This is the second argument provided to `GenServer.start/2`, and you can use it to pass data to the server process while starting it.
* The result of `init/1` must be in the format `{:ok, initial_state}`.
* `handle_cast/2` accepts the request and the state and should return the result in the format `{:noreply, new_state}`.
* `handle_call/3` takes the request, the caller information, and the state. It should return the result in the format `{:reply, response, new_state}`.

<!-- livebook:{"break_markdown":true} -->

* First, `GenServer.start/2` works synchronously. In other words, `start/2` returns only after the `init/1` callback has finished in the server process. Consequently, the client process that starts the server is blocked until the server process is initialized.
