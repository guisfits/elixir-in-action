# 10. Beyond GenServer

## Tasks

The Task module can be used to concurrently run a job — a process that takes some input, performs some computation, and then stops.

## Awaited task

An awaited task is a process that executes some function, sends the function result back to the starter process, and then terminates.

```elixir
run_query = fn query_def ->
  Process.sleep(2000)
  "#{query_def} result"
end
```

```elixir
1..5
|> Enum.map(&Task.async(fn -> run_query.("query #{&1}") end))
|> Enum.map(&Task.await/1)
```

It should be noted that Task.async/1 links the new task to the starter process. Therefore, if any task process crashes, the starter process will crash too (unless it's trapping exits). The crash of the starter process will, in turn, cause all the other tasks started by the same process to crash. In other words, starting multiple tasks with Task.async/1 has all-or-nothing semantics. The crash of a single task takes down all other tasks as well as the starter process.

## Non-awaited tasks

Sometimes you don't want to send the result message back to the starter process. For example, let's say that when handling a web request you start a longer-running task that communicates with the payment gateway. You could start the task and immediately respond to the user that the request has been accepted. Once the task is done, the server would issue a notification about the outcome, perhaps via WebSocket or an email. Or suppose a task needs to produce a side effect, such as a database update, without notifying the starter process. In either scenario, the starter process doesn't need to be notified about the task's outcome.

```elixir
Task.start_link(fn ->
  Process.sleep(1000)
  IO.puts("Hello from task")
end)
```

```elixir
defmodule Todo.Metrics
  use Task

  def start_link(_arg), do: Task.start_link(&loop/0)

  defp loop() do
    Process.sleep(:timer.seconds(10))
    IO.inspect(collect_metrics())
    loop()
  end

  defp collect_metrics() do
    [
      memory_usage: :erlang.memory(:total)
      process_count: :erlang.system_info(:process_count)
    ]
  end
end
```

The `Todo.Metrics` module is ready to be injected into the supervision tree, as shown in the following listing.

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Todo.System do
  def start_link do
    Supervisor.start_link(
      [
        Todo.Metrics,
        ...
      ],
      strategy: :one_for_one
    )
  end
end
```

This is the main purpose of `Task.start_link/1` — it allows you to start an OTP-compliant process that you can safely start as a child of some supervisor.

## Agents

The **Agent** module provides an abstraction that's similar to **GenServer**. **Agents** require a bit less ceremony and can therefore eliminate some boilerplate associated with **GenServers**. On the flip side, **Agent** doesn't support all the scenarios that **GenServer** does. As a mechanical rule, if a GenServer-powered module implements only `init/1`, `handle_cast/2`, and `handle_call/3`, it can be replaced with an Agent. But if you need to use `handle_info/2` or `terminate/1`, **Agent** won't suffice, and you'll need to use **GenServer**.

<!-- livebook:{"break_markdown":true} -->

Start Agent with some state:

```elixir
{:ok, pid} = Agent.start_link(fn -> %{name: "Bob", age: 30} end)
```

Get value from Agent

```elixir
Agent.get(pid, fn state -> state.name end)
```

To update agent's state:

```elixir
Agent.update(pid, fn state -> %{state | age: state.age + 1} end)
```

```elixir
Agent.get(pid, fn state -> state end)
```

## Agents and concurrency

An agent process works exactly like a GenServer. If multiple clients try to work with the same agent at the same time, the operations will be serialized and executed one by one. In fact, the Agent module is implemented in plain Elixir on top of GenServer.

## ETS tables

When you have to many process depending one single process, this process will be a _bottleneck_. As process is a syncronious operation, to many request into it will be getting the system lazy. The problem isn't the many processes running in the system, but the single process on which many other processes depend. In this particular scenario, you can do much better with ETS tables, so let's see what they are and how you can work with them.

<!-- livebook:{"break_markdown":true} -->

ETS table is a separate memory-data structure where you can store Erlang terms. terms. This makes it possible to share the system-wide state without introducing a dedicated server process. The data is kept in an ETS table — a dynamic memory structure where you can store tuples.

* There's no specific ETS data type. A table is identified by its ID (a reference type) or a global name (an atom).
* ETS tables are mutable. A write to a table will affect subsequent read operations.
* Multiple processes can write to or read from a single ETS table. Writes and reads are concurrent.
* Minimum isolation is ensured. Multiple processes can safely write to the same row of the same table. The last write wins.
* An ETS table resides in a separate memory space. Any data coming in or out is deep-copied.
* ETS doesn't put pressure on the garbage collector. Overwritten or deleted data is immediately released.
* An ETS table is deeply connected to its owner process (by default, the process that created the table). If the owner process terminates, the ETS table is reclaimed.
* Other than on owner-process termination, there's no automatic garbage collection of an ETS table. Even if you don't hold a reference to the table, it still occupies memory.

```elixir
table = :ets.new(:my_table, []
```

```elixir
:ets.insert(table, {:key_1, 1})
:ets.insert(table, {:key_2, 2})
:ets.insert(table, {:key_3, 3})
```

```elixir
:ets.lookup(table, :key_2)
```

You may wonder why the list is returned if you can have only one row per distinct key. The reason is that ETS tables support other table types, some of which allow duplicate rows. In particular, the following table types are possible:

* `:set` — The default. One row per distinct key is allowed.
* `:ordered_set` — Just like :set, but rows are in term order (comparison via the < and > operators).
* `:bag` — Multiple rows with the same key are allowed, but two rows can't be completely identical.
* `:duplicate_bag` — Just like :bag, but allows duplicate rows.

Another important option is the table's access permissions. The following values are possible:

* `:protected` — The default. The owner process can read from and write to the table. All other processes can read from the table.
* `:public` — All processes can read from and write to the table.
* `:private` — Only the owner process can access the table.

```elixir
:ets.new(:some_table, [:public, :duplicate_bag])
```

Finally, it's worth discussing the table name. This argument must be an atom, and by default it serves no purpose (although, strangely enough, you must still provide it). You can create multiple tables with the same name, and they're still different tables.   
But if you provide a :named_table option, the table becomes accessible via its name:

```elixir
:ets.new(:my_table3, [:named_table])
```

```elixir
:ets.insert(:my_table3, {:key_1, 3})
:ets.lookup(:my_table3, :key_1)
```

```elixir
defmodule EtsKeyValue do
  use GenServer

  def start_link do
    GenServer.start(__MODULE__, nil, name: __MODULE__)
  end

  def init(_) do
    :ets.new(
      __MODULE__,
      [:named_table, :public, write_concurrency: true]
    )

    {:ok, nil}
  end

  def put(key, value) do
    :ets.insert(__MODULE__, {key, value})
  end

  def get(key) do
    case :ets.lookup(__MODULE__, key) do
      [{^key, value}] -> value
      [] -> nil
    end
  end
end
```

Notice the `:write_concurrency` option provided to `:ets.new`. This option allows you to issue concurrent writes to the table, which is exactly what you want in this case. There's also a `:read_concurrency` option, which can improve read performance in some cases. This option isn't set here, because the Bench module performs a lot of interleaved reads and writes, and in such cases :read_concurrency can lead to worse performance. Instead of randomly setting these options, it's always good to measure and observe their effects.

```elixir
EtsKeyValue.start_link()
```

```elixir
EtsKeyValue.put(:some_key, :some_value)
EtsKeyValue.get(:some_key)
```

You might wonder why GenServer is still used in the ETS-based key/value store. The sole purpose of this process is to keep the table alive. Remember, an ETS table is released from memory when the owner process terminates. Therefore, you need to have a distinct, long-running process that creates and owns the table.
